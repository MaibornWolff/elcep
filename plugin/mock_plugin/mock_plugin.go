// Code generated by MockGen. DO NOT EDIT.
// Source: plugin/api.go

// Package mock_plugin is a generated GoMock package.
package mock_plugin

import (
	config "github.com/MaibornWolff/elcep/config"
	gomock "github.com/golang/mock/gomock"
	elastic "github.com/olivere/elastic"
	prometheus "github.com/prometheus/client_golang/prometheus"
	reflect "reflect"
)

// MockPlugin is a mock of Plugin interface
type MockPlugin struct {
	ctrl     *gomock.Controller
	recorder *MockPluginMockRecorder
}

// MockPluginMockRecorder is the mock recorder for MockPlugin
type MockPluginMockRecorder struct {
	mock *MockPlugin
}

// NewMockPlugin creates a new mock instance
func NewMockPlugin(ctrl *gomock.Controller) *MockPlugin {
	mock := &MockPlugin{ctrl: ctrl}
	mock.recorder = &MockPluginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPlugin) EXPECT() *MockPluginMockRecorder {
	return m.recorder
}

// BuildMetrics mocks base method
func (m *MockPlugin) BuildMetrics(arg0 []config.Query) []prometheus.Collector {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildMetrics", arg0)
	ret0, _ := ret[0].([]prometheus.Collector)
	return ret0
}

// BuildMetrics indicates an expected call of BuildMetrics
func (mr *MockPluginMockRecorder) BuildMetrics(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildMetrics", reflect.TypeOf((*MockPlugin)(nil).BuildMetrics), arg0)
}

// Perform mocks base method
func (m *MockPlugin) Perform(arg0 *elastic.Client) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Perform", arg0)
}

// Perform indicates an expected call of Perform
func (mr *MockPluginMockRecorder) Perform(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Perform", reflect.TypeOf((*MockPlugin)(nil).Perform), arg0)
}
